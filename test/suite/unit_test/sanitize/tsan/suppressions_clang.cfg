# Flow-IPC
# Copyright 2023 Akamai Technologies, Inc.
#
# Licensed under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in
# compliance with the License.  You may obtain a copy
# of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in
# writing, software distributed under the License is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing
# permissions and limitations under the License.

# Current version assumption: clang-15/16/17.

# Had some issues matching ^ and $ in this one; leaving them out at times; these are very unlikely to match something
# unintentional.

# This suppression eliminates a rather large (in our context) number of warnings.  Each warning can be, as of this
# writing, classified as type A and type B, where type A is by far more common (e.g., 10:1 or so).
#
# Type A: The warning itself on a read or write in, invariably, up-stack of Test_logger::do_log() which is a
# mildly glorified wrapper of flow::log::Simple_ostream_logger.  The latter is being used to wrap either cout or
# cerr or both, so the read or write is in a fairly varied code location -- there are many variations -- but
# always either within a boost::iostreams place or sometimes in std::streambuf-y (STL streams) area.
# The alleged race is between that and the "previous" write or read up-stack of the creation of a
# flow::util::String_ostream, always up-stack of a test function called check_output().  This test code,
# which I (ygoldfel), did not write (not that I am implying it's bad), is using rdbuf() substitution of
# cout or cerr's backing buffer to the String_ostream's, temporarily; so as to grab the cout/cerr output as
# a result of executing the tested code snippet and check it against expected regex(es).  To me this looks like
# a false positive; the logging during the warning happens synchronously after the String_ostream is created; so
# not seeing the race.  That said I personally would like to understand TSAN's algorithm better to see why it
# thinks what it thinks; it is also I am missing some subtlety, particularly as I lack the background for using
# this technique of checking log output.  All I'm saying here is (1) it at least looks fine to me, and I'm not
# 100% clueless here; (2) it works repeatedly with no issues seen in practice with this check_output() technique;
# and (3) presumably my colleague who chose the technique had some solid background on the viability of this
# technique.  Hence leaving this as a false-positive seems reasonable.  Read on though.
#
# Type B: (Much rarer) There is also the warning, also up-stack of Test_logger::do_log() (hence the common suppression)
# versus Type A, which is a race against another Test_logger::do_log(); in actual fact it can be deduced they
# are for *different* `Test_logger`s; and in fact each has a locked mutex in-effect -- but they are different
# mutexes, because they are different `Test_logger`s (more saliently, different `flow::log::Simple_ostream_logger`s).
# However the object being written to is always (for type B) identified as std::cout itself.  In other words
# the test code is (when it comes down to it) accessing std::cout concurrently from multiple threads.
# Formally speaking this is documented in Flow to be allowed, in the sense that it won't lead to undefined behavior
# (crashing, etc.); but also recommended-against, because concurrent access to an ostream is liable to result in
# qualitatively unpleasant output: interleaved text, sometimes confusing formatting, etc.  Indeed this is a known
# problem as of this writing; I have noticed that during parallelization-involving tests, the logs can be
# (in spots) quite unpleasant to read; and I've made a @todo to that effect (also read on).  (I speculate that
# my colleague is aware of it too; it just was not a top-priority concern, as the related unit tests did their
# essential job of verifying various conditions -- how the logs came out was of tertiary importance.)  So this one
# I took to be a reasonable suppression, as the danger is cosmetic and to be handled orthogonally.
#
# To summarize, for both types A and B I (ygoldfel) have valid reason to believe suppressing Test_logger::do_log()
# up-stack TSAN warnings is proper/correct; while also recognizing some lower-priority and/or semi-orthogonal
# follow-up work is also in order.  For that I have created tickets (which do remind to revisit this suppression
# before marking that follow-up work as complete).  To restate, roughly, the follow-up work:
#   - For Type A warning: Dive into why TSAN considers this a race.  Ideally either the author of the test would do so;
#     or another developer ready to really interrogate the topic in great depth.
#   - For Type B warning: Make the parallel logging situation (where applicable) in unit_test just be nicer;
#     e.g., log to different files; don't use Simple_ostream_logger but rather Async_file_logger; and so on.
race:^ipc::test::Test_logger::do_log
