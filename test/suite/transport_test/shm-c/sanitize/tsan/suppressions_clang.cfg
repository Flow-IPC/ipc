# This is for transport_test exercise mode SHM-classic sub-mode.  Cf. exercise mode heap sub-mode: It passes cleanly
# with ~no suppressions.  Yet SHM-classic sub-mode spams quite a few TSAN warnings.  Investigating them shows it is
# *always* when reading or writing in SHM; and looking in more detail shows there is no real race; TSAN just cannot
# follow the allocs/deallocs/shared ownership between the two processes (so when instrumenting the server run
# of transport_test, it cannot know or understand what client is doing on opposing side; and vice versa); so accesses
# serially to two unrelated data structures at the same address at different times look like a race to it.
# (Interestingly SHM-jemalloc sub-mode passes TSAN fine with no warnings; perhaps because the alloc and dealloc
# always occur in the same process, so it can follow the situation better.)  Bottom line is: In this sub-mode
# all the observed warnings (1) are false positives and (2) concern access of addresses mapped to SHM.
#
# So we suppress these.  Using C++ attributes on function to not-sanitize certain (SHM-accessing) functions would
# have been good; but such suppression affects only the exact function being attributed (not ones it calls), and
# neither should or really can attribute STL and Boost code -- so that approach is a no-go.
#
# Run-time suppressions on the other hand, while somewhat tedious, work well; and can be applied surgically to
# individual programs or even individual invocations of individual programs (in this case transport_test.exec when
# run in scripted mode, SHM-classic sub-mode).
#
# For this particular set of false positives: They tend to be fairly reliable in terms of which ones pop up; but
# as to the number of each one, and their order, there is a bit of variance in what we've seen.  And some functions
# mentioned are very specific, which makes one suspicious whether an un-suppressed nearby method will spit out a
# warning one day.  For this reason we try to anticipate such situations with wildcards suppressing more stuff than
# we've specifically seen -- but not too much more.

# offset_ptr used (in our context at least) only for SHM work, so catch anything in its code: will be false-positive.
race:^boost::interprocess::offset_ptr<
# Similarly anything capnp-generated or from libcapnp like the following would be in SHM.  (Actually the
# session master channel does non-SHM capnp, so there are some things in non-SHM; but those things are TSAN sans
# suppression in heap sub-mode at least.  So it's not so bad to include it in these suppressions.)  Again catch
# anything in there as false positive.
race:^capnp::_::

# There are common warnings from flow::util::Basic_blob<Stateless_allocator<...>>: in size(), in begin(), others.
# In every case it's access to a SHM-oriented allocator-parameterized Basic_blob, which is a container type.
# From this it follows there could be warnings at times from other such containers we test; from memory could be
# string<>, list<>, etc.  In all cases however they'll be shm::stl::Stateless_allocator-parameterized, and in all
# cases of the latter it is access to SHM.  So it should be ideal to just mention that allocator and wildcard the
# rest.
race:ipc::shm::stl::Stateless_allocator<

# This is a little too specific for my tastes -- but on the other hand just `boost::intrusive::*` might catch some
# non-false-positive warning, theoretically, in non-SHM work.  Until we see a false positive in boost::intrusive
# that's not this, let's just suppress the exact false positive we have in fact seen.
race:^boost::intrusive::detail::size_holder<true, unsigned long, void>::get_size$

# (End SHM-related suppressions.)
