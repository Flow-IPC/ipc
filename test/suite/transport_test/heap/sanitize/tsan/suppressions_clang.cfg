# Current version assumption: clang-15/16/17.

# Had some issues matching ^ and $ in this one; leaving them out; these are very unlikely to match something
# unintentional.

# This is for transport_test exercise mode heap sub-mode.

# I have seen this warning exactly once as of this writing, with clang-15.  Upon careful analysis: it's got to be
# a false positive.  It looks like this:
#   WARNING: ThreadSanitizer: data race (pid=75301)
#     Write of size 8 at 0x7ba8000006f0 by thread T79:
#       #0 close <null> (ex_srv.exec+0xa71c5)
#       #1 boost::asio::detail::eventfd_select_interrupter::close_descriptors()
#          .../include/boost/asio/detail/impl/eventfd_select_interrupter.ipp:106:5 (ex_srv.exec+0x1684e1)
#       #2 boost::asio::detail::eventfd_select_interrupter::~eventfd_select_interrupter()
#          .../include/boost/asio/detail/impl/eventfd_select_interrupter.ipp:98:3 (ex_srv.exec+0x1684e1)
#       #3 boost::asio::detail::epoll_reactor::~epoll_reactor()
#          .../include/boost/asio/detail/impl/epoll_reactor.ipp:72:1 (ex_srv.exec+0x1684e1)
#       #4 boost::asio::detail::epoll_reactor::~epoll_reactor()
#          .../include/boost/asio/detail/impl/epoll_reactor.ipp:67:1 (ex_srv.exec+0x168525)
#       ...
#       #16 ipc::transport::sync_io::Native_socket_stream::operator=(ipc::transport::sync_io::Native_socket_stream&&)
#          /home/runner/work/ipc/ipc/ipc_core/src/ipc/transport/sync_io/native_socket_stream.cpp:36:77 (ex_srv.exec+0xd14d14)
#       #17 ipc::session::Server_session_impl<...>::create_channel_and_resources(...)::'lambda'()::operator()() const
#          /home/runner/work/ipc/ipc/ipc_session/src/ipc/session/detail/server_session_impl.hpp:1302:28 (ex_srv.exec+0x2ae130)
#       ...
#     Previous read of size 8 at 0x7ba8000006f0 by thread T2 (mutexes: write M0):
#       #0 epoll_ctl <null> (ex_srv.exec+0xa8086)
#       #1 boost::asio::detail::epoll_reactor::deregister_descriptor(int, boost::asio::detail::epoll_reactor::descriptor_state*&, bool)
#          .../include/boost/asio/detail/impl/epoll_reactor.ipp:403:7 (ex_srv.exec+0x18a89e)
#       #2 boost::asio::detail::reactive_descriptor_service::release(boost::asio::detail::reactive_descriptor_service::implementation_type&) .../include/boost/asio/detail/impl/reactive_descriptor_service.ipp:174:14 (ex_srv.exec+0x18f816)
#       #3 boost::asio::posix::basic_descriptor<boost::asio::any_io_executor>::release()
#          .../include/boost/asio/posix/basic_descriptor.hpp:381:32 (ex_srv.exec+0x18f816)
#       #4 ipc::util::sync_io::Asio_waitable_native_handle::~Asio_waitable_native_handle()
#          /home/runner/work/ipc/ipc/ipc_core/src/ipc/util/sync_io/asio_waitable_native_hndl.cpp:53:3 (ex_srv.exec+0xd1f805)
#       #5 ipc::transport::sync_io::Native_socket_stream::Impl::~Impl()
#          /home/runner/work/ipc/ipc/ipc_core/src/ipc/transport/sync_io/detail/native_socket_stream_impl.cpp:197:1 (ex_srv.exec+0xd4e7f5)
#       ...
#       #34 ipc::transport::test::Ex_srv<...>::App_session::~App_session()
#          /home/runner/work/ipc/ipc/test/suite/transport_test/ex_srv.hpp:64:9 (ex_srv.exec+0x26fcd2)
#       ...
#     Location is file descriptor 74 created by thread T79 at:
#       #0 eventfd <null> (ex_srv.exec+0xa66cc)
#       #1 boost::asio::detail::eventfd_select_interrupter::open_descriptors()
#          .../include/boost/asio/detail/impl/eventfd_select_interrupter.ipp:59:5 (ex_srv.exec+0x169545)
#       ...
#       #20 ipc::transport::sync_io::Native_socket_stream::Native_socket_stream()
#          /home/runner/work/ipc/ipc/ipc_core/src/ipc/transport/sync_io/native_socket_stream.cpp:55:3 (ex_srv.exec+0xd14e3e)
#       #21 ipc::session::Server_session_impl<...>::create_channel_and_resources(...)
#          /home/runner/work/ipc/ipc/ipc_session/src/ipc/session/detail/server_session_impl.hpp:1275:24 (ex_srv.exec+0x2aba3e)
#       ...
#     Thread T79 '0x7b7c00012600]' (tid=75474, running) created by thread T5 at:
#       ...
#     Thread T2 'guy' (tid=75305, running) created by main thread at:
#       ...
#   SUMMARY: ThreadSanitizer: data race (/home/runner/bin/ex_srv.exec+0xa71c5) in close
# It is worried this FD is being close()d -- after *just* being created (synchronously even!) in that same thread,
# within Server_session_impl::create_channel_and_resources() -- which indeed happens: a blank Native_socket_stream,
# with an unused Task_engine (boost::asio::io_context), including its epoll FD, is quickly replaced by a real one
# storing a native handle from a ::socketpair() call; so the io_context+FD is created/opened and destroyed/closed.
# The thread is that session's Server_session_impl m_async_worker.  It thinks that same FD was being messed with in a
# different thread -- namely 'guy' (from Ex_srv test class) -- when it was epoll_ctl()ed.  But that was a different
# Server_session_impl which was just closed.  It might be the same FD, numerically, but it was closed and then
# opened again; there is plenty of synchronization between those unrelated operations.  Not sure why TSAN got confused;
# would need to understand its algorithm in more detail; but I (ygoldfel) know this particular code quite well; it
# doesn't make sense to me that this is unsynchronized access to the same FD.
# TODO: Try to reproduce and debug.  Won't be easy; again I've only seen it once.  Do note that the test completed
# fine even then (but that doesn't in itself prove there's no race of course).
#
# In the meantime suppress the issue at a few frames up from the reported problem.  Hopefully that takes care of it.
race:boost::asio::detail::epoll_reactor::~epoll_reactor
